{"version":"0.3.0","body":"function main(workbook: ExcelScript.Workbook) {\n  const logs: string[] = [];\n  const sheet = workbook.getWorksheet(\"TEAMS\");\n  if (!sheet) {\n    logs.push(\"Erreur : Feuille 'TEAMS' introuvable.\");\n    return { logs };\n  }\n\n  const tables = sheet.getTables();\n  if (tables.length === 0) {\n    logs.push(\"Erreur : Aucune table trouvée sur la feuille.\");\n    sheet.getRange(\"O6\").setValue(\"Aucune table trouvée\");\n    return { logs };\n  }\n\n  const table = tables[0];\n  const dataRange = table.getRangeBetweenHeaderAndTotal();\n  const rows = dataRange.getValues();\n  logs.push(`Nombre de lignes lues : ${rows.length}`);\n\n  // Fonction pour parser des dates dans la colonne 5\n  function parseDate(value: string | number | boolean): Date {\n    if (typeof value === \"string\") {\n      if (value.includes(\"T\")) {\n        const iso = new Date(value);\n        if (!isNaN(iso.getTime())) return iso;\n      }\n      const regex = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/;\n      const match = value.match(regex);\n      if (match) {\n        const [_, day, month, year] = match;\n        return new Date(`${year}-${month}-${day}`);\n      }\n    }\n    if (typeof value === \"number\") {\n      return new Date((value - 25569) * 86400 * 1000);\n    }\n    return new Date(value.toString());\n  }\n\n  // Grouper les lignes par clé composée des colonnes 1, 2, 3 (concaténées avec un séparateur)\n  const map = new Map<string, { row: (string | number | boolean)[], date: Date, index: number }[]>();\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const key = [row[0], row[1], row[2]].map(x => (x ?? \"\").toString().trim()).join(\"|\");\n    if (key === \"\") {\n      logs.push(`Ligne ${i} ignorée car clé vide.`);\n      continue;\n    }\n    const date = parseDate(row[4]);\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push({ row, date, index: i });\n  }\n  logs.push(`Clés distinctes trouvées (concaténation col 1|2|3) : ${Array.from(map.keys()).length}`);\n\n  // Marquer les doublons récents à supprimer (garder la plus ancienne par clé)\n  const indicesToDelete = new Set<number>();\n  for (const entries of map.values()) {\n    if (entries.length > 1) {\n      entries.sort((a, b) => a.date.getTime() - b.date.getTime());\n      for (let i = 1; i < entries.length; i++) {\n        indicesToDelete.add(entries[i].index);\n      }\n    }\n  }\n  logs.push(`Indices à supprimer (doublons détectés) : ${Array.from(indicesToDelete).join(\", \")}`);\n\n  // Supprimer de bas en haut pour ne pas décaler les indices\n  const tableRange = table.getRangeBetweenHeaderAndTotal();\n  const indices = Array.from(indicesToDelete).sort((a, b) => b - a);\n  let deletedRows = 0;\n  for (const i of indices) {\n    tableRange.getCell(i, 0).getEntireRow().delete(ExcelScript.DeleteShiftDirection.up);\n    deletedRows++;\n  }\n  logs.push(`Nombre de doublons supprimés : ${deletedRows}`);\n\n  // Supprimer les lignes entièrement vides restantes\n  const cleanedRange = table.getRangeBetweenHeaderAndTotal();\n  const cleanedRows = cleanedRange.getValues();\n  let emptyDeleted = 0;\n  for (let i = cleanedRows.length - 1; i >= 0; i--) {\n    const isEmpty = cleanedRows[i].every(cell => cell === \"\" || cell === null);\n    if (isEmpty) {\n      cleanedRange.getCell(i, 0).getEntireRow().delete(ExcelScript.DeleteShiftDirection.up);\n      emptyDeleted++;\n    }\n  }\n  logs.push(`Lignes vides supprimées : ${emptyDeleted}`);\n\n  sheet.getRange(\"O6\").setValue(\"Script exécuté à \" + new Date().toLocaleString());\n  logs.push(\"Script terminé à \" + new Date().toLocaleString());\n\n  return { logs };\n}","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{\"result\":{\"type\":\"object\",\"properties\":{\"logs\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}}}},\"signature\":{\"comment\":\"\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}